{
  "apiVersion": "tekton.dev/v1",
  "kind": "Task",
  "metadata": {
    "name": "acs-deploy-check",
    "annotations": {
      "task.results.format": "application/json",
      "task.results.type": "roxctl-deployment-check",
      "task.results.container": "step-report",
      "task.output.location": "logs"
    }
  },
  "spec": {
    "description": "Policy check a deployment with StackRox/RHACS This tasks allows you to check a deployment against build-time policies and apply enforcement to fail builds. It's a companion to the stackrox-image-scan task, which returns full vulnerability scan results for an image.",
    "params": [
      {
        "name": "rox-secret-name",
        "type": "string",
        "description": "Secret containing the StackRox server endpoint and API token with CI permissions under rox-api-endpoint and rox-api-token keys.\nFor example: rox-api-endpoint: rox.stackrox.io:443 ; rox-api-token: eyJhbGciOiJS...\n"
      },
      {
        "name": "gitops-repo-url",
        "type": "string",
        "description": "URL of gitops repository to check."
      },
      {
        "name": "verbose",
        "type": "string",
        "default": "true"
      },
      {
        "name": "insecure-skip-tls-verify",
        "type": "string",
        "default": "false",
        "description": "When set to `\"true\"`, skip verifying the TLS certs of the Central endpoint. Defaults to `\"false\"`.\n"
      }
    ],
    "volumes": [
      {
        "name": "repository",
        "emptyDir": {}
      },
      {
        "name": "rox-secret",
        "secret": {
          "secretName": "$(params.rox-secret-name)",
          "optional": true
        }
      }
    ],
    "steps": [
      {
        "name": "annotate-task",
        "image": "registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c",
        "script": "#!/usr/bin/env bash\necho \"acs-image-scan $(context.taskRun.name)\"\noc annotate taskrun $(context.taskRun.name) task.results.format=application/json\noc annotate taskrun $(context.taskRun.name) task.results.type=roxctl-deployment-check\noc annotate taskrun $(context.taskRun.name) task.results.container=step-report\noc annotate taskrun $(context.taskRun.name) task.output.location=logs\n"
      },
      {
        "name": "rox-deploy-check",
        "image": "quay.io/redhat-appstudio/appstudio-utils:5bd7d6cb0b17f9f2eab043a8ad16ba3d90551bc2@sha256:8c7fcf86af40c71aeb58e4279625c8308af5144e2f6b8e28b0ec7e795260e5f7",
        "volumeMounts": [
          {
            "name": "repository",
            "mountPath": "/workspace/repository"
          },
          {
            "name": "rox-secret",
            "mountPath": "/rox-secret"
          }
        ],
        "workingDir": "/workspace/repository",
        "env": [
          {
            "name": "INSECURE_SKIP_TLS_VERIFY",
            "value": "$(params.insecure-skip-tls-verify)"
          },
          {
            "name": "GITOPS_REPO_URL",
            "value": "$(params.gitops-repo-url)"
          }
        ],
        "script": "#!/usr/bin/env bash\nset +x\n\n# Check if rox API enpoint is configured\nif test -f /rox-secret/rox-api-endpoint ; then\n  export ROX_CENTRAL_ENDPOINT=$(</rox-secret/rox-api-endpoint)\nelse\n  echo \"rox API endpoint is not set, demo will exit with success\"\n  echo \"TODO: configure the pipeline with your ACS server domain. Set your ACS endpoint under 'rox-api-endpoint' key in the secret specified in rox-secret-name parameter. For example: 'rox.stackrox.io:443'\"\n  exit 0\nfi\n\n# Check if rox API token is configured\nif test -f /rox-secret/rox-api-token ; then\n  export ROX_API_TOKEN=$(</rox-secret/rox-api-token)\nelse\n  echo \"rox API token is not set, demo will exit with success\"\n  echo \"TODO: configure the pipeline to have access to ROXCTL. Set you ACS token under 'rox-api-token' key in the secret specified in rox-secret-name parameter.\"\n  exit 0\nfi\n\necho \"Using rox central endpoint ${ROX_CENTRAL_ENDPOINT}\"\n\n# Clone gitops repository\necho \"Using gitops repository: ${GITOPS_REPO_URL}\"\ngit clone \"${GITOPS_REPO_URL}\" --single-branch --depth 1 gitops\ncd gitops\necho \"List of files in gitops repository root:\"\nls -al\necho \"List of components in the gitops repository:\"\nls -l components/\n\necho \"Download roxctl cli\"\nif [ \"${INSECURE_SKIP_TLS_VERIFY}\" = \"true\" ] ; then\n  curl_insecure='--insecure'\nfi\ncurl $curl_insecure -s -L -H \"Authorization: Bearer $ROX_API_TOKEN\" \\\n  \"https://${ROX_CENTRAL_ENDPOINT}/api/cli/download/roxctl-linux\" \\\n  --output ./roxctl  \\\n  > /dev/null\nif [ $? -ne 0 ]; then\n  echo 'Failed to download roxctl'\n  exit 1\nfi\nchmod +x ./roxctl  > /dev/null\n\ncomponent_name=$(yq .metadata.name application.yaml)\necho \"Performing scan for ${component_name} component\"\nfile_to_check=\"components/${component_name}/base/deployment.yaml\"\nif [ -f \"$file_to_check\" ]; then\n  echo \"ROXCTL on $file_to_check\"\n  ./roxctl deployment check \\\n    $( [ \"${INSECURE_SKIP_TLS_VERIFY}\" = \"true\" ] && echo -n \"--insecure-skip-tls-verify\") \\\n    -e \"${ROX_CENTRAL_ENDPOINT}\" --file \"$file_to_check\" --output json \\\n    > /tmp/roxctl_deployment_check_output.json\n  cp /tmp/roxctl_deployment_check_output.json /workspace/repository/acs-deploy-check.json\nelse\n  echo \"Failed to find file to check: $file_to_check\"\n  exit 2\nfi\n"
      },
      {
        "name": "report",
        "image": "registry.access.redhat.com/ubi8-minimal@sha256:d8b81a38b5ad9694742ea03159d3217cd2dde3997b1ee53bbb53c33dd67be7b7",
        "volumeMounts": [
          {
            "name": "repository",
            "mountPath": "/workspace/repository"
          }
        ],
        "script": "#!/usr/bin/env bash\ncat /workspace/repository/acs-deploy-check.json\n"
      }
    ]
  }
}
