{
  "apiVersion": "tekton.dev/v1",
  "kind": "Task",
  "metadata": {
    "name": "acs-image-check",
    "annotations": {
      "task.results.format": "application/json",
      "task.results.type": "roxctl-image-check",
      "task.results.container": "step-report",
      "task.output.location": "logs"
    }
  },
  "spec": {
    "description": "Policy check an image with StackRox/RHACS This tasks allows you to check an image against build-time policies and apply enforcement to fail builds. It's a companion to the stackrox-image-scan task, which returns full vulnerability scan results for an image.",
    "params": [
      {
        "name": "rox-secret-name",
        "type": "string",
        "description": "Secret containing the StackRox server endpoint and API token with CI permissions under rox-api-endpoint and rox-api-token keys.\nFor example: rox-api-endpoint: rox.stackrox.io:443 ; rox-api-token: eyJhbGciOiJS...\n"
      },
      {
        "name": "image",
        "type": "string",
        "description": "Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)\n"
      },
      {
        "name": "insecure-skip-tls-verify",
        "type": "string",
        "default": "false",
        "description": "When set to `\"true\"`, skip verifying the TLS certs of the Central\nendpoint.  Defaults to `\"false\"`.\n"
      },
      {
        "name": "image-digest",
        "type": "string",
        "description": "Digest of the image\n"
      }
    ],
    "volumes": [
      {
        "name": "rox-secret",
        "secret": {
          "secretName": "$(params.rox-secret-name)",
          "optional": true
        }
      },
      {
        "name": "shared-folder",
        "emptyDir": {
          "medium": "Memory",
          "sizeLimit": "50Mi"
        }
      }
    ],
    "steps": [
      {
        "name": "annotate-task",
        "image": "registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c",
        "script": "#!/usr/bin/env bash\necho \"acs-image-scan $(context.taskRun.name)\"\noc annotate taskrun $(context.taskRun.name) task.results.format=application/json\noc annotate taskrun $(context.taskRun.name) task.results.type=roxctl-image-check\noc annotate taskrun $(context.taskRun.name) task.results.container=step-report\noc annotate taskrun $(context.taskRun.name) task.output.location=logs\n"
      },
      {
        "name": "rox-image-check",
        "image": "registry.access.redhat.com/ubi8-minimal@sha256:d8b81a38b5ad9694742ea03159d3217cd2dde3997b1ee53bbb53c33dd67be7b7",
        "volumeMounts": [
          {
            "name": "rox-secret",
            "mountPath": "/rox-secret"
          },
          {
            "name": "shared-folder",
            "mountPath": "/steps-shared-folder"
          }
        ],
        "env": [
          {
            "name": "PARAM_INSECURE_SKIP_TLS_VERIFY",
            "value": "$(params.insecure-skip-tls-verify)"
          },
          {
            "name": "PARAM_IMAGE",
            "value": "$(params.image)"
          },
          {
            "name": "PARAM_IMAGE_DIGEST",
            "value": "$(params.image-digest)"
          }
        ],
        "script": "#!/usr/bin/env bash\nset +x\n\n# Check if rox API enpoint is configured\nif test -f /rox-secret/rox-api-endpoint ; then\n  export ROX_CENTRAL_ENDPOINT=$(</rox-secret/rox-api-endpoint)\nelse\n  echo \"rox API endpoint is not set, demo will exit with success\"\n  echo \"TODO: configure the pipeline with your ACS server domain. Set your ACS endpoint under 'rox-api-endpoint' key in the secret specified in rox-secret-name parameter. For example: 'rox.stackrox.io:443'\"\n  exit 0\nfi\n\n# Check if rox API token is configured\nif test -f /rox-secret/rox-api-token ; then\n  export ROX_API_TOKEN=$(</rox-secret/rox-api-token)\nelse\n  echo \"rox API token is not set, demo will exit with success\"\n  echo \"TODO: configure the pipeline to have access to ROXCTL. Set you ACS token under 'rox-api-token' key in the secret specified in rox-secret-name parameter.\"\n  exit 0\nfi\n\necho \"Using rox central endpoint ${ROX_CENTRAL_ENDPOINT}\"\n\necho \"Download roxctl cli\"\nif [ \"${PARAM_INSECURE_SKIP_TLS_VERIFY}\" = \"true\" ]; then\n  curl_insecure='--insecure'\nfi\ncurl $curl_insecure -s -L -H \"Authorization: Bearer $ROX_API_TOKEN\" \\\n  \"https://${ROX_CENTRAL_ENDPOINT}/api/cli/download/roxctl-linux\" \\\n  --output ./roxctl \\\n  > /dev/null\nif [ $? -ne 0 ]; then\n  echo 'Failed to download roxctl'\n  exit 1\nfi\nreceived_filesize=$(stat -c%s ./roxctl)\nif (( $received_filesize < 10000 )); then\n  # Responce from ACS server is not a binary but error message\n  cat ./roxctl\n  echo 'Failed to download roxctl'\n  exit 2\nfi\nchmod +x ./roxctl  > /dev/null\n\necho \"roxctl image check\"\nIMAGE=${PARAM_IMAGE}@${PARAM_IMAGE_DIGEST}\n./roxctl image check \\\n  $( [ \"${PARAM_INSECURE_SKIP_TLS_VERIFY}\" = \"true\" ] && \\\n  echo -n \"--insecure-skip-tls-verify\") \\\n  -e \"${ROX_CENTRAL_ENDPOINT}\" --image \"$IMAGE\" --output json --force \\\n  > roxctl_image_check_output.json\ncp roxctl_image_check_output.json /steps-shared-folder/acs-image-check.json\n"
      },
      {
        "name": "report",
        "image": "registry.access.redhat.com/ubi8-minimal@sha256:d8b81a38b5ad9694742ea03159d3217cd2dde3997b1ee53bbb53c33dd67be7b7",
        "volumeMounts": [
          {
            "name": "shared-folder",
            "mountPath": "/steps-shared-folder"
          }
        ],
        "script": "#!/usr/bin/env bash\ncat /steps-shared-folder/acs-image-check.json\n"
      }
    ]
  }
}
