{
  "apiVersion": "tekton.dev/v1",
  "kind": "Task",
  "metadata": {
    "annotations": {
      "tekton.dev/displayName": "Verify Enterprise Contract",
      "tekton.dev/pipelines.minVersion": "0.19",
      "tekton.dev/tags": "ec, chains, signature, conftest"
    },
    "labels": {
      "app.kubernetes.io/version": "0.1"
    },
    "name": "verify-enterprise-contract"
  },
  "spec": {
    "description": "Verify the enterprise contract is met",
    "params": [
      {
        "description": "Spec section of an ApplicationSnapshot resource. Not all fields of the\nresource are required. A minimal example:\n  {\n    \"components\": [\n      {\n        \"containerImage\": \"quay.io/example/repo:latest\"\n      }\n    ]\n  }\nEach \"containerImage\" in the \"components\" array is validated.\n",
        "name": "IMAGES",
        "type": "string"
      },
      {
        "default": "enterprise-contract-service/default",
        "description": "Name of the policy configuration (EnterpriseContractPolicy\nresource) to use. `namespace/name` or `name` syntax supported. If\nnamespace is omitted the namespace where the task runs is used.\n",
        "name": "POLICY_CONFIGURATION",
        "type": "string"
      },
      {
        "default": "",
        "description": "Public key used to verify signatures. Must be a valid k8s cosign reference, e.g. k8s://my-space/my-secret where my-secret contains the expected cosign.pub attribute.",
        "name": "PUBLIC_KEY",
        "type": "string"
      },
      {
        "default": "",
        "description": "Rekor host for transparency log lookups",
        "name": "REKOR_HOST",
        "type": "string"
      },
      {
        "default": "false",
        "description": "Skip Rekor transparency log checks during validation.",
        "name": "IGNORE_REKOR",
        "type": "string"
      },
      {
        "default": "",
        "description": "TUF mirror URL. Provide a value when NOT using public sigstore deployment.",
        "name": "TUF_MIRROR",
        "type": "string"
      },
      {
        "default": "",
        "description": "Path to a directory containing SSL certs to be used when communicating\nwith external services. This is useful when using the integrated registry\nand a local instance of Rekor on a development cluster which may use\ncertificates issued by a not-commonly trusted root CA. In such cases,\n\"/var/run/secrets/kubernetes.io/serviceaccount\" is a good value. Multiple\npaths can be provided by using the \":\" separator.\n",
        "name": "SSL_CERT_DIR",
        "type": "string"
      },
      {
        "default": "true",
        "description": "Include rule titles and descriptions in the output. Set to \"false\" to disable it.",
        "name": "INFO",
        "type": "string"
      },
      {
        "default": "true",
        "description": "Fail the task if policy fails. Set to \"false\" to disable it.",
        "name": "STRICT",
        "type": "string"
      },
      {
        "default": "/tekton/home",
        "description": "Value for the HOME environment variable.",
        "name": "HOMEDIR",
        "type": "string"
      },
      {
        "default": "now",
        "description": "Run policy checks with the provided time.",
        "name": "EFFECTIVE_TIME",
        "type": "string"
      }
    ],
    "results": [
      {
        "description": "Short summary of the policy evaluation for each image",
        "name": "TEST_OUTPUT"
      }
    ],
    "stepTemplate": {
      "env": [
        {
          "name": "HOME",
          "value": "$(params.HOMEDIR)"
        }
      ]
    },
    "steps": [
      {
        "args": [
          "version"
        ],
        "command": [
          "ec"
        ],
        "image": "registry.redhat.io/rhtas/ec-rhel9:0.2",
        "name": "version"
      },
      {
        "env": [
          {
            "name": "TUF_MIRROR",
            "value": "$(params.TUF_MIRROR)"
          }
        ],
        "image": "registry.redhat.io/rhtas/ec-rhel9:0.2",
        "name": "initialize-tuf",
        "script": "set -euo pipefail\n\nif [[ -z \"${TUF_MIRROR:-}\" ]]; then\n    echo 'TUF_MIRROR not set. Skipping TUF root initialization.'\n    exit\nfi\n\necho 'Initializing TUF root...'\ncosign initialize --mirror \"${TUF_MIRROR}\" --root \"${TUF_MIRROR}/root.json\"\necho 'Done!'"
      },
      {
        "args": [
          "validate",
          "image",
          "--verbose",
          "--images",
          "$(params.IMAGES)",
          "--policy",
          "$(params.POLICY_CONFIGURATION)",
          "--public-key",
          "$(params.PUBLIC_KEY)",
          "--rekor-url",
          "$(params.REKOR_HOST)",
          "--ignore-rekor=$(params.IGNORE_REKOR)",
          "--info=$(params.INFO)",
          "--strict=false",
          "--show-successes",
          "--effective-time=$(params.EFFECTIVE_TIME)",
          "--output",
          "yaml=$(params.HOMEDIR)/report.yaml",
          "--output",
          "appstudio=$(results.TEST_OUTPUT.path)",
          "--output",
          "json=$(params.HOMEDIR)/report-json.json"
        ],
        "command": [
          "ec"
        ],
        "computeResources": {
          "limits": {
            "memory": "2Gi"
          },
          "requests": {
            "cpu": "250m",
            "memory": "2Gi"
          }
        },
        "env": [
          {
            "name": "SSL_CERT_DIR",
            "value": "/tekton-custom-certs:/etc/ssl/certs:/etc/pki/tls/certs:/system/etc/security/cacerts:$(params.SSL_CERT_DIR)"
          },
          {
            "name": "EC_CACHE",
            "value": "false"
          }
        ],
        "image": "registry.redhat.io/rhtas/ec-rhel9:0.2",
        "name": "validate"
      },
      {
        "args": [
          "$(params.HOMEDIR)/report.yaml"
        ],
        "command": [
          "cat"
        ],
        "image": "registry.redhat.io/rhtas/ec-rhel9:0.2",
        "name": "report"
      },
      {
        "args": [
          "$(params.HOMEDIR)/report-json.json"
        ],
        "command": [
          "cat"
        ],
        "image": "registry.redhat.io/rhtas/ec-rhel9:0.2",
        "name": "report-json"
      },
      {
        "args": [
          ".",
          "$(results.TEST_OUTPUT.path)"
        ],
        "command": [
          "jq"
        ],
        "image": "registry.redhat.io/rhtas/ec-rhel9:0.2",
        "name": "summary"
      },
      {
        "args": [
          "--argjson",
          "strict",
          "$(params.STRICT)",
          "-e",
          ".result == \"SUCCESS\" or .result == \"WARNING\" or ($strict | not)\n",
          "$(results.TEST_OUTPUT.path)"
        ],
        "command": [
          "jq"
        ],
        "image": "registry.redhat.io/rhtas/ec-rhel9:0.2",
        "name": "assert"
      },
      {
        "image": "registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c",
        "name": "annotate-task",
        "script": "#!/usr/bin/env bash\necho \"verify-enterprise-contract $(context.taskRun.name)\"\noc annotate taskrun $(context.taskRun.name) task.results.format=application/json\noc annotate taskrun $(context.taskRun.name) task.results.type=ec\noc annotate taskrun $(context.taskRun.name) task.results.container=step-report-json\noc annotate taskrun $(context.taskRun.name) task.output.location=logs\n"
      }
    ],
    "workspaces": [
      {
        "description": "The workspace where the snapshot spec json file resides",
        "name": "data",
        "optional": true
      }
    ]
  }
}
