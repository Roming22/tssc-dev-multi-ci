

# üíÅ This is the sample TSSC Workflow:
# - Checkout the repository
# - Perform a container image build with Attestations
# - Push the built image to the defined registry below
# - Send a pull request or directly to this repo to update the deployment yaml
# - uses the scripts - todo - need to convert to actions

name: Build-Gitops-Workflow 
env:
  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ${{ secrets.IMAGE_REGISTRY }}
  IMAGE_REGISTRY_USER: ${{ secrets.IMAGE_REGISTRY_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
  # üñäÔ∏è EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""
  IMAGE_TAG: ""
  DEFAULT_UPDATE_VIA_PUSH: "true"
  
on: 
  workflow_dispatch:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]
    
jobs:
  tssc-build:
    name: Build and Update Gitops 
    runs-on: ubuntu-24.04
    environment: production

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = { 
            IMAGE_REGISTRY: `${{ secrets.IMAGE_REGISTRY }}`,
            IMAGE_REGISTRY_USER: `${{ secrets.IMAGE_REGISTRY_USER }}`,
            IMAGE_REGISTRY_PASSWORD: `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`,
            
            ROX_CENTRAL_ENDPOINT: `${{ secrets.ROX_CENTRAL_ENDPOINT }}`,
            ROX_API_TOKEN: `${{ secrets.ROX_API_TOKEN }}`,
            GITOPS_AUTH_PASSWORD: `${{ secrets.GITOPS_AUTH_PASSWORD }}`,
            QUAY_IO_CREDS_USR: `${{ secrets.QUAY_IO_CREDS_USR }}`,
            QUAY_IO_CREDS_PSW: `${{ secrets.QUAY_IO_CREDS_PSW }}`,
            COSIGN_SECRET_PASSWORD: `${{ secrets.COSIGN_SECRET_PASSWORD }}`,
            COSIGN_SECRET_KEY: `${{ secrets.COSIGN_SECRET_KEY }}`,
            COSIGN_PUBLIC_KEY: `${{ secrets.COSIGN_PUBLIC_KEY }}`,
          }; 
          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`‚úîÔ∏è Secret "${name}" is set`);
            return false;
          });
          if (missingSecrets.length > 0) {
            core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`‚úÖ All the required secrets are set`);
          }
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '2'  
    - name: Init 
      run: |
        git clone  https://github.com/redhat-appstudio/tssc-sample-jenkins.git 
        export CI_TYPE=gitlab    
        cp rhtap/env.sh tssc-sample-jenkins/resources/env.sh
        echo "Init" 
        bash tssc-sample-jenkins/resources/init.sh 
    - name: Build 
      run: | 
        echo "Build" 
        bash tssc-sample-jenkins/resources/buildah-rhtap.sh  
        bash tssc-sample-jenkins/resources/cosign-sign-attest.sh 
    - name: Scan 
      run: | 
        echo "Scan"  
        bash tssc-sample-jenkins/resources/acs-deploy-check.sh 
        bash tssc-sample-jenkins/resources/acs-image-check.sh 
        bash tssc-sample-jenkins/resources/acs-image-scan.sh    
     - name: Deploy 
      run: | 
        echo "Deploy"  
        bash tssc-sample-jenkins/resources/acs-deploy-check.sh  
     - name: Summary 
      run: | 
        echo "Summary"   
        bash tssc-sample-jenkins/resources/show-sbom-rhdh.sh 
        bash tssc-sample-jenkins/resources/summary.sh  
  
    # TODO -- Update official actions to do attestations
    # https://github.com/redhat-actions/buildah-build#readme
    # - name: Build from Dockerfile
    #   if: env.NEW_IMAGE_CREATED == 'true'
    #   id: build-image
    #   uses: redhat-actions/buildah-build@v2
    #   with:
    #     image: ${{ env.APP_NAME }}
    #     tags: ${{ env.IMAGE_TAGS }}

    #     # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
    #     # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
    #     # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
    #     dockerfiles: |
    #       ./Dockerfile
    # # https://github.com/redhat-actions/push-to-registry#readme
    # - name: Push to registry
    #   if: env.NEW_IMAGE_CREATED == 'true'
    #   id: push-image
    #   uses: redhat-actions/push-to-registry@v2
    #   with:
    #     image: ${{ steps.build-image.outputs.image }}
    #     tags: ${{ steps.build-image.outputs.tags }}
    #     registry: ${{ env.IMAGE_REGISTRY }}
    #     username: ${{ env.IMAGE_REGISTRY_USER }}
    #     password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}
    # - name: Direct Push Update 
    #   run: | 
    #       echo "Direct Push:"
    #       git config --global user.name "Auto-Push[bot]"
    #       git config --global user.email "auto-push@users.noreply.github.com" 
    #       git add -A
    #       git commit -m "Direct Push to Repo"
    #       git push