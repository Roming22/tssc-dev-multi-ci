
# üíÅ The Gitops Starter workflow will:
# - Checkout your repository
# - Perform a TSSC container image build
# - Push the built image to the users provided registry
# - Update the deployment yaml

name: TSSC-Build-Attest-Scan-Deploy
env:
  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ${{ secrets.IMAGE_REGISTRY }}
  IMAGE_REGISTRY_USER: ${{ secrets.IMAGE_REGISTRY_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
 
  QUAY_IO_CREDS_USR: ${{ secrets.QUAY_IO_CREDS_USR }}
  QUAY_IO_CREDS_PSW: ${{ secrets.QUAY_IO_CREDS_PSW }}
  COSIGN_SECRET_PASSWORD: ${{ secrets.COSIGN_SECRET_PASSWORD }}
  COSIGN_SECRET_KEY: ${{ secrets.COSIGN_SECRET_KEY }}
  COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
  GITOPS_AUTH_PASSWORD: ${{ secrets.GITOPS_AUTH_PASSWORD }}

  # üñäÔ∏è EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""
  IMAGE_TAG: ""
  DEFAULT_UPDATE_VIA_PUSH: "true"
  # üñäÔ∏è EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: "" 
on: 
  workflow_dispatch:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]

jobs:
  tssc-ci-cd:
    name: Build and send Image Update PR
    # ubuntu-20.04 can also be used.
    runs-on: ubuntu-20.04
    environment: production

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = { 
            IMAGE_REGISTRY_PASSWORD: `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`,
          }; 
          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`‚úîÔ∏è Secret "${name}" is set`);
            return false;
          });
          if (missingSecrets.length > 0) {
            core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`‚úÖ All the required secrets are set`);
          }
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '2'
    - name: Init 
      run: |
        git clone  https://github.com/redhat-appstudio/tssc-sample-jenkins.git tssc-sample-jenkins
        export CI_TYPE=gitlab    
        cp rhtap/env.sh tssc-sample-jenkins/resources/env.sh
        echo "Init" 
        bash tssc-sample-jenkins/resources/init.sh 
    - name: Build 
      run: | 
        echo "Build" 
        bash tssc-sample-jenkins/resources/buildah-rhtap.sh  
        bash tssc-sample-jenkins/resources/cosign-sign-attest.sh 
    - name: Scan 
      run: | 
        echo "Scan"  
        bash tssc-sample-jenkins/resources/acs-deploy-check.sh 
        bash tssc-sample-jenkins/resources/acs-image-check.sh 
        bash tssc-sample-jenkins/resources/acs-image-scan.sh   
    - name: Done 
      run: | 
        echo "Done"   